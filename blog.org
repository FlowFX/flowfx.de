#+HUGO_BASE_DIR: .
#+hugo_section: blog

* Blog
** Using Automator to create an Emacs.app for running Emacs Client & Server :emacs:macos:@tech:
:PROPERTIES:
:EXPORT_DATE: 2024-02-11
:EXPORT_FILE_NAME: emacs-app
:END:

Or: *Back To The Mac 1*

After using only Linux machines for work for the past 5 years, my next machine will be a MacBook. That's why I'm working on improving my development environment on macOS as best as I can now, something that's not really been necessary when using my personal Mac.

First order of business: how do I start the Emacs server and connect to it with the emacsclient?

I'm using [[https://github.com/d12frosted/homebrew-emacs-plus][Emacs+]] from homebrew:

#+begin_src shell
  brew install emacs-plus@29
#+end_src

Once installed, it works fine, but neither do Spotlight - or Alfred - see any Emacs.app, nor do I know how to start the server or start multiple clients that connect to it.

I found the solution on the blog of one Alex Balgavy: [[https://blog.alex.balgavy.eu/setting-up-emacs-as-a-daemon-on-macos/][Setting up Emacs as a daemon on macOS]]. Then I simplified it for my purposes.

All I needed to do is create a new [[https://support.apple.com/de-de/guide/automator/welcome/mac][Automator]] document of type /Application/ that runs this shell script:

#+begin_src shell
  export PATH=/opt/homebrew/bin:$PATH
  emacsclient -c -a '' >/dev/null 2>&1 &
#+end_src

`-c` creates a GUI frame, and `-a ''` connects to the server named `''` - or starts it if it's not already running.

[[/images/2024/Automator-Emacs_app.png]]

Every time I call *Emacs.app*, I get a new fresh Emacs window, just like I'm used to on my Linux machine that runs the Emacs server from systemd.
** The Uplifters - Live im Proberaum :theuplifters:live:@music:
:PROPERTIES:
:EXPORT_DATE: 2023-02-27
:EXPORT_FILE_NAME: the-uplifters-live-im-proberaum
:END:

I have [[https://theuplifters.de/][an awesome band]]! In December we recorded a few songs "live" in our rehearsal room in Freiburg, both audio and video. Over the winter everybody but me put /a lot/ of work into pulling both together and making it look and sound good. And what can I say, they did an amazing job. I'm truly impressed. Plus: everything was done using free and open source software: [[https://ardour.org/][Ardour]] and [[https://kdenlive.org/][kdenlive]]!

Well, here they are, two of our original songs, live in the studio:

*** Be Free

#+html: {{< youtube LRyKdED6srA >}}

*** Change My Life

#+html: {{< youtube E8jI3KVACGQ >}}

If you want to see us play live sometime, head over to [[https://theuplifters.de][theuplifters.de]] and sign up to our newsletter! We only send out emails when we have public gigs to announce. Of course you can always book us for your private garden party as well. ðŸ˜ƒ
** EurKEY, MacOS and Emacs' Meta key :emacs:macos:keyboard:@tech:
:PROPERTIES:
:EXPORT_DATE: 2024-08-08
:EXPORT_FILE_NAME: eurkey-macos-and-emacs-meta-key
:END:

*Back To The Mac 2*

I am building my first [[https://codeberg.org/flowfx/emacs.d][custom Emacs configuration]], moving away from [[https://github.com/doomemacs/][Doom Emacs]]. Doom was great for getting started with Emacs after using Vim exclusively for the previous... 15 years?!

After the jump [[/blog/emacs-app][back to the Mac]] there were a number of new issues with my setup that I had no idea how to solve, and there's so much magic happening in Doom that I didn't really want to look too much into it. So I'm taking a step back and starting from scratch. Not really from scratch, because I am using [[https://codeberg.org/ashton314/emacs-bedrock][Emacs Bedrock]] as a base config. But still.

Reading [[https://www.masteringemacs.org/][Mastering Emacs]] helped me /a ton/ in finally understanding some core concepts like ... windows, frames, ~M-x~, ...

-----

Speaking of ~M-x~.

One of my most important (tech/productivity) discoveries of the last 10 years is the [EurKEY keyboard layout](#). In short, it let's me use the ANSI/US keyboard layout for programming while also conveniently insert Umlauts and other accented characters. During my work day I mostly write in English and Ruby. Other times I often write German or Spanish. EurKEY let's me do all of that very simply and in similar fashion in every operating systems I use: MacOS and GNU/Linux.

EurKEY requires the use of the Mac's ~option~ key. Emacs also likes the ~option~ key. It's called ~Meta~ there and is used in the most important command: ~Meta-x~. If Emacs uses ~option~ for ~Meta~, then it's not forwarded to MacOS to be used in EurKEY.

The solution? Disable the ~option~ key and only re-enable the /right/ ~option~ key to act as ~Meta~.

#+begin_src elisp
  (setq mac-option-modifier 'none)
  (setq mac-right-option-modifier 'meta)
#+end_src

This way I can use *the right option key* for Emacs and the left one to write Umlauts.
